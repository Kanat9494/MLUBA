@page "/"
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<style>
    #bottom-nav {
        display: none;
    }

    .custom-overlay {
        position: fixed; /* фиксированная позиция, чтобы не скроллилась вместе с контентом */
        z-index: 9999; /* задаем z-index для того чтобы элемент был поверх других элементов */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(153, 153, 153, 0.5); /* задаем полупрозрачный цвет фона */
        display: flex; /* используем flexbox для центрирования содержимого */
        justify-content: center;
        align-items: center;
    }

    .custom-center {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 70px;
        height: 70px;
    }
</style>

<div class="login-wrapper">
    <div class="login-form">
        <h2>Добро пожаловать</h2>
        <h4>Войдите для продолжения</h4>
        <div class="form-group">
            <label for="username">Имя пользователя:</label>
            <input type="text" id="username" name="username" placeholder="Введите логин" @bind-value="_userName">
            <small style="@errorLogin">Логин не может быть пустым</small>
        </div>
        <div class="form-group">
            <label for="password">Пароль:</label>
            <input type="password" id="password" name="password" placeholder="Введите пароль" @bind-value="_password">
            <small style="@errorPassword">Пароль не может быть пустым</small>
        </div>
        
        <div style="width: 100%" class="text-center">
            <a href="/reset-password" style="color: #212121">Забыли пароль?</a><br />

            <MudButton @onclick="OnLogin" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" Style="width: 70%;">
                Войти
            </MudButton>
        </div>
    </div>
</div>

@if (_isLoading)
{
    <div class="custom-overlay text-center">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Large" />
    </div>
}

@code {
    string _userName = "996708362166";
    string _password = "9900";
    private bool _isLoading = false;
    AuthenticateResponse _currentUser = new AuthenticateResponse();

    //Стили
    string errorLogin = "display: none;";
    string errorPassword = "display: none";

    private async Task OnLogin()
    {
        _isLoading = true;
        StateHasChanged();
        if (string.IsNullOrEmpty(_userName))
        {
            errorLogin = "display: block; color: red;";
            _isLoading = false;
            return;
        }
        if (string.IsNullOrEmpty(_password))
        {
            errorPassword = "display: block; color: red;";
            _isLoading = false;
            return;
        }

        //await Task.Delay(1500);
        _currentUser = await LoginService.GetInstance().AuthenticateUser(userName: _userName, password: _password);

        if (_currentUser.StatusCode == 200)
        {
            await SecureStorage.Default.SetAsync("UserAccessToken", _currentUser.AccessToken);
            await SecureStorage.Default.SetAsync("UserId", _currentUser.UserId.ToString());
            await SecureStorage.Default.SetAsync("UserName", _currentUser.UserName);

            UriHelper.NavigateTo("home");
        }
        else
        {
            _isLoading = false;
            OpenDialog(_currentUser.ResponseMessage);
        }
    }

    private async Task CallAlert()
    {
        await JSRuntime.InvokeVoidAsync("testAlert");
    }

    private void OpenDialog(string responseMessage)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", responseMessage);
        DialogService.Show<DialogUsageExample_Dialog>("Не удалось войти", parameters);
    }
}

